
vv_lib_test:     file format elf64-x86-64
vv_lib_test
architecture: i386:x86-64, flags 0x00000150:
HAS_SYMS, DYNAMIC, D_PAGED
start address 0x0000000000001260

Program Header:
    PHDR off    0x0000000000000040 vaddr 0x0000000000000040 paddr 0x0000000000000040 align 2**3
         filesz 0x00000000000002d8 memsz 0x00000000000002d8 flags r--
  INTERP off    0x0000000000000318 vaddr 0x0000000000000318 paddr 0x0000000000000318 align 2**0
         filesz 0x000000000000001c memsz 0x000000000000001c flags r--
    LOAD off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**12
         filesz 0x00000000000006a0 memsz 0x00000000000006a0 flags r--
    LOAD off    0x0000000000001000 vaddr 0x0000000000001000 paddr 0x0000000000001000 align 2**12
         filesz 0x0000000000000545 memsz 0x0000000000000545 flags r-x
    LOAD off    0x0000000000002000 vaddr 0x0000000000002000 paddr 0x0000000000002000 align 2**12
         filesz 0x0000000000000248 memsz 0x0000000000000248 flags r--
    LOAD off    0x0000000000002da8 vaddr 0x0000000000003da8 paddr 0x0000000000003da8 align 2**12
         filesz 0x0000000000000268 memsz 0x0000000000000270 flags rw-
 DYNAMIC off    0x0000000000002db8 vaddr 0x0000000000003db8 paddr 0x0000000000003db8 align 2**3
         filesz 0x00000000000001f0 memsz 0x00000000000001f0 flags rw-
    NOTE off    0x0000000000000338 vaddr 0x0000000000000338 paddr 0x0000000000000338 align 2**3
         filesz 0x0000000000000030 memsz 0x0000000000000030 flags r--
    NOTE off    0x0000000000000368 vaddr 0x0000000000000368 paddr 0x0000000000000368 align 2**2
         filesz 0x0000000000000044 memsz 0x0000000000000044 flags r--
0x6474e553 off    0x0000000000000338 vaddr 0x0000000000000338 paddr 0x0000000000000338 align 2**3
         filesz 0x0000000000000030 memsz 0x0000000000000030 flags r--
EH_FRAME off    0x0000000000002030 vaddr 0x0000000000002030 paddr 0x0000000000002030 align 2**2
         filesz 0x000000000000006c memsz 0x000000000000006c flags r--
   STACK off    0x0000000000000000 vaddr 0x0000000000000000 paddr 0x0000000000000000 align 2**4
         filesz 0x0000000000000000 memsz 0x0000000000000000 flags rw-
   RELRO off    0x0000000000002da8 vaddr 0x0000000000003da8 paddr 0x0000000000003da8 align 2**0
         filesz 0x0000000000000258 memsz 0x0000000000000258 flags r--

Dynamic Section:
  NEEDED               libc.so.6
  INIT                 0x0000000000001000
  FINI                 0x0000000000001538
  INIT_ARRAY           0x0000000000003da8
  INIT_ARRAYSZ         0x0000000000000008
  FINI_ARRAY           0x0000000000003db0
  FINI_ARRAYSZ         0x0000000000000008
  GNU_HASH             0x00000000000003b0
  STRTAB               0x00000000000004b0
  SYMTAB               0x00000000000003d8
  STRSZ                0x00000000000000a2
  SYMENT               0x0000000000000018
  DEBUG                0x0000000000000000
  PLTGOT               0x0000000000003fa8
  PLTRELSZ             0x0000000000000048
  PLTREL               0x0000000000000007
  JMPREL               0x0000000000000658
  RELA                 0x0000000000000598
  RELASZ               0x00000000000000c0
  RELAENT              0x0000000000000018
  FLAGS                0x0000000000000008
  FLAGS_1              0x0000000008000001
  VERNEED              0x0000000000000568
  VERNEEDNUM           0x0000000000000001
  VERSYM               0x0000000000000552
  RELACOUNT            0x0000000000000003

Version References:
  required from libc.so.6:
    0x09691974 0x00 03 GLIBC_2.3.4
    0x09691a75 0x00 02 GLIBC_2.2.5

Sections:
Idx Name          Size      VMA               LMA               File off  Algn
  0 .interp       0000001c  0000000000000318  0000000000000318  00000318  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .note.gnu.property 00000030  0000000000000338  0000000000000338  00000338  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .note.gnu.build-id 00000024  0000000000000368  0000000000000368  00000368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .note.ABI-tag 00000020  000000000000038c  000000000000038c  0000038c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .gnu.hash     00000024  00000000000003b0  00000000000003b0  000003b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dynsym       000000d8  00000000000003d8  00000000000003d8  000003d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .dynstr       000000a2  00000000000004b0  00000000000004b0  000004b0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .gnu.version  00000012  0000000000000552  0000000000000552  00000552  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .gnu.version_r 00000030  0000000000000568  0000000000000568  00000568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .rela.dyn     000000c0  0000000000000598  0000000000000598  00000598  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 10 .rela.plt     00000048  0000000000000658  0000000000000658  00000658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 11 .init         0000001b  0000000000001000  0000000000001000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .plt          00000040  0000000000001020  0000000000001020  00001020  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .plt.got      00000010  0000000000001060  0000000000001060  00001060  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .plt.sec      00000030  0000000000001070  0000000000001070  00001070  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text         00000495  00000000000010a0  00000000000010a0  000010a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .fini         0000000d  0000000000001538  0000000000001538  00001538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .rodata       0000002f  0000000000002000  0000000000002000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 18 .eh_frame_hdr 0000006c  0000000000002030  0000000000002030  00002030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 19 .eh_frame     000001a8  00000000000020a0  00000000000020a0  000020a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 20 .init_array   00000008  0000000000003da8  0000000000003da8  00002da8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 21 .fini_array   00000008  0000000000003db0  0000000000003db0  00002db0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 22 .dynamic      000001f0  0000000000003db8  0000000000003db8  00002db8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 23 .got          00000058  0000000000003fa8  0000000000003fa8  00002fa8  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 24 .data         00000010  0000000000004000  0000000000004000  00003000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 25 .bss          00000008  0000000000004010  0000000000004010  00003010  2**0
                  ALLOC
 26 .comment      00000025  0000000000000000  0000000000000000  00003010  2**0
                  CONTENTS, READONLY
 27 .debug_aranges 00000040  0000000000000000  0000000000000000  00003035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_info   00000a58  0000000000000000  0000000000000000  00003075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_abbrev 00000246  0000000000000000  0000000000000000  00003acd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .debug_line   000004a3  0000000000000000  0000000000000000  00003d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_str    000001fd  0000000000000000  0000000000000000  000041b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_loc    0000085d  0000000000000000  0000000000000000  000043b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 33 .debug_ranges 00000030  0000000000000000  0000000000000000  00004c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
0000000000000000 l    df *ABS*	0000000000000000              Scrt1.o
000000000000038c l     O .note.ABI-tag	0000000000000020              __abi_tag
0000000000000000 l    df *ABS*	0000000000000000              vv_list.c
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
0000000000001290 l     F .text	0000000000000000              deregister_tm_clones
00000000000012c0 l     F .text	0000000000000000              register_tm_clones
0000000000001300 l     F .text	0000000000000000              __do_global_dtors_aux
0000000000004010 l     O .bss	0000000000000001              completed.0
0000000000003db0 l     O .fini_array	0000000000000000              __do_global_dtors_aux_fini_array_entry
0000000000001340 l     F .text	0000000000000000              frame_dummy
0000000000003da8 l     O .init_array	0000000000000000              __frame_dummy_init_array_entry
0000000000000000 l    df *ABS*	0000000000000000              crtstuff.c
0000000000002244 l     O .eh_frame	0000000000000000              __FRAME_END__
0000000000000000 l    df *ABS*	0000000000000000              
0000000000003db0 l       .init_array	0000000000000000              __init_array_end
0000000000003db8 l     O .dynamic	0000000000000000              _DYNAMIC
0000000000003da8 l       .init_array	0000000000000000              __init_array_start
0000000000002030 l       .eh_frame_hdr	0000000000000000              __GNU_EH_FRAME_HDR
0000000000003fa8 l     O .got	0000000000000000              _GLOBAL_OFFSET_TABLE_
0000000000001000 l     F .init	0000000000000000              _init
0000000000001530 g     F .text	0000000000000005              __libc_csu_fini
0000000000001480 g     F .text	0000000000000033              vv_list_iterate
0000000000000000  w      *UND*	0000000000000000              _ITM_deregisterTMCloneTable
0000000000004000  w      .data	0000000000000000              data_start
0000000000000000       F *UND*	0000000000000000              puts@GLIBC_2.2.5
0000000000001350 g     F .text	000000000000000d              my_list_iterator
0000000000004010 g       .data	0000000000000000              _edata
0000000000001538 g     F .fini	0000000000000000              .hidden _fini
0000000000000000       F *UND*	0000000000000000              __libc_start_main@GLIBC_2.2.5
0000000000004000 g       .data	0000000000000000              __data_start
0000000000001410 g     F .text	0000000000000061              vv_list_remove
0000000000000000  w      *UND*	0000000000000000              __gmon_start__
0000000000004008 g     O .data	0000000000000000              .hidden __dso_handle
0000000000002000 g     O .rodata	0000000000000004              _IO_stdin_used
0000000000001360 g     F .text	000000000000002a              vv_list_initalize
00000000000014c0 g     F .text	0000000000000065              __libc_csu_init
0000000000000000       F *UND*	0000000000000000              malloc@GLIBC_2.2.5
0000000000004018 g       .bss	0000000000000000              _end
0000000000001260 g     F .text	000000000000002f              _start
0000000000004010 g       .bss	0000000000000000              __bss_start
00000000000010a0 g     F .text	00000000000001b2              main
0000000000000000       F *UND*	0000000000000000              __printf_chk@GLIBC_2.3.4
0000000000004010 g     O .data	0000000000000000              .hidden __TMC_END__
0000000000000000  w      *UND*	0000000000000000              _ITM_registerTMCloneTable
0000000000000000  w    F *UND*	0000000000000000              __cxa_finalize@GLIBC_2.2.5
0000000000001390 g     F .text	0000000000000074              vv_list_append



Disassembly of section .init:

0000000000001000 <_init>:
    1000:	f3 0f 1e fa          	endbr64 
    1004:	48 83 ec 08          	sub    $0x8,%rsp
    1008:	48 8b 05 d9 2f 00 00 	mov    0x2fd9(%rip),%rax        # 3fe8 <__gmon_start__>
    100f:	48 85 c0             	test   %rax,%rax
    1012:	74 02                	je     1016 <_init+0x16>
    1014:	ff d0                	call   *%rax
    1016:	48 83 c4 08          	add    $0x8,%rsp
    101a:	c3                   	ret    

Disassembly of section .plt:

0000000000001020 <.plt>:
    1020:	ff 35 8a 2f 00 00    	push   0x2f8a(%rip)        # 3fb0 <_GLOBAL_OFFSET_TABLE_+0x8>
    1026:	f2 ff 25 8b 2f 00 00 	bnd jmp *0x2f8b(%rip)        # 3fb8 <_GLOBAL_OFFSET_TABLE_+0x10>
    102d:	0f 1f 00             	nopl   (%rax)
    1030:	f3 0f 1e fa          	endbr64 
    1034:	68 00 00 00 00       	push   $0x0
    1039:	f2 e9 e1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    103f:	90                   	nop
    1040:	f3 0f 1e fa          	endbr64 
    1044:	68 01 00 00 00       	push   $0x1
    1049:	f2 e9 d1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    104f:	90                   	nop
    1050:	f3 0f 1e fa          	endbr64 
    1054:	68 02 00 00 00       	push   $0x2
    1059:	f2 e9 c1 ff ff ff    	bnd jmp 1020 <_init+0x20>
    105f:	90                   	nop

Disassembly of section .plt.got:

0000000000001060 <__cxa_finalize@plt>:
    1060:	f3 0f 1e fa          	endbr64 
    1064:	f2 ff 25 8d 2f 00 00 	bnd jmp *0x2f8d(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    106b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .plt.sec:

0000000000001070 <puts@plt>:
    1070:	f3 0f 1e fa          	endbr64 
    1074:	f2 ff 25 45 2f 00 00 	bnd jmp *0x2f45(%rip)        # 3fc0 <puts@GLIBC_2.2.5>
    107b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001080 <malloc@plt>:
    1080:	f3 0f 1e fa          	endbr64 
    1084:	f2 ff 25 3d 2f 00 00 	bnd jmp *0x2f3d(%rip)        # 3fc8 <malloc@GLIBC_2.2.5>
    108b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

0000000000001090 <__printf_chk@plt>:
    1090:	f3 0f 1e fa          	endbr64 
    1094:	f2 ff 25 35 2f 00 00 	bnd jmp *0x2f35(%rip)        # 3fd0 <__printf_chk@GLIBC_2.3.4>
    109b:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)

Disassembly of section .text:

00000000000010a0 <main>:
    10a0:	f3 0f 1e fa          	endbr64 
    10a4:	55                   	push   %rbp
    10a5:	48 89 e5             	mov    %rsp,%rbp
    10a8:	41 57                	push   %r15
    10aa:	41 56                	push   %r14
    10ac:	41 55                	push   %r13
    10ae:	41 54                	push   %r12
    10b0:	53                   	push   %rbx
    10b1:	48 83 ec 08          	sub    $0x8,%rsp
    10b5:	e8 a6 02 00 00       	call   1360 <vv_list_initalize>
    10ba:	48 8d 35 43 0f 00 00 	lea    0xf43(%rip),%rsi        # 2004 <_IO_stdin_used+0x4>
    10c1:	49 89 c4             	mov    %rax,%r12
    10c4:	48 89 c7             	mov    %rax,%rdi
    10c7:	e8 c4 02 00 00       	call   1390 <vv_list_append>
    10cc:	48 8d 35 35 0f 00 00 	lea    0xf35(%rip),%rsi        # 2008 <_IO_stdin_used+0x8>
    10d3:	4c 89 e7             	mov    %r12,%rdi
    10d6:	49 89 c6             	mov    %rax,%r14
    10d9:	e8 b2 02 00 00       	call   1390 <vv_list_append>
    10de:	48 8d 35 27 0f 00 00 	lea    0xf27(%rip),%rsi        # 200c <_IO_stdin_used+0xc>
    10e5:	4c 89 e7             	mov    %r12,%rdi
    10e8:	49 89 c7             	mov    %rax,%r15
    10eb:	e8 a0 02 00 00       	call   1390 <vv_list_append>
    10f0:	48 8d 35 1b 0f 00 00 	lea    0xf1b(%rip),%rsi        # 2012 <_IO_stdin_used+0x12>
    10f7:	4c 89 e7             	mov    %r12,%rdi
    10fa:	49 89 c5             	mov    %rax,%r13
    10fd:	e8 8e 02 00 00       	call   1390 <vv_list_append>
    1102:	41 8b 54 24 10       	mov    0x10(%r12),%edx
    1107:	48 8d 35 09 0f 00 00 	lea    0xf09(%rip),%rsi        # 2017 <_IO_stdin_used+0x17>
    110e:	31 c0                	xor    %eax,%eax
    1110:	bf 01 00 00 00       	mov    $0x1,%edi
    1115:	e8 76 ff ff ff       	call   1090 <__printf_chk@plt>
    111a:	49 8b 1c 24          	mov    (%r12),%rbx
    111e:	48 85 db             	test   %rbx,%rbx
    1121:	74 16                	je     1139 <main+0x99>
    1123:	0f 1f 44 00 00       	nopl   0x0(%rax,%rax,1)
    1128:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    112c:	e8 3f ff ff ff       	call   1070 <puts@plt>
    1131:	48 8b 1b             	mov    (%rbx),%rbx
    1134:	48 85 db             	test   %rbx,%rbx
    1137:	75 ef                	jne    1128 <main+0x88>
    1139:	49 8b 5c 24 08       	mov    0x8(%r12),%rbx
    113e:	48 8d 35 dc 0e 00 00 	lea    0xedc(%rip),%rsi        # 2021 <_IO_stdin_used+0x21>
    1145:	bf 01 00 00 00       	mov    $0x1,%edi
    114a:	31 c0                	xor    %eax,%eax
    114c:	48 8b 53 10          	mov    0x10(%rbx),%rdx
    1150:	e8 3b ff ff ff       	call   1090 <__printf_chk@plt>
    1155:	48 89 de             	mov    %rbx,%rsi
    1158:	4c 89 e7             	mov    %r12,%rdi
    115b:	e8 b0 02 00 00       	call   1410 <vv_list_remove>
    1160:	49 8b 1c 24          	mov    (%r12),%rbx
    1164:	48 85 db             	test   %rbx,%rbx
    1167:	74 18                	je     1181 <main+0xe1>
    1169:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1170:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    1174:	e8 f7 fe ff ff       	call   1070 <puts@plt>
    1179:	48 8b 1b             	mov    (%rbx),%rbx
    117c:	48 85 db             	test   %rbx,%rbx
    117f:	75 ef                	jne    1170 <main+0xd0>
    1181:	49 8b 57 10          	mov    0x10(%r15),%rdx
    1185:	48 8d 35 95 0e 00 00 	lea    0xe95(%rip),%rsi        # 2021 <_IO_stdin_used+0x21>
    118c:	bf 01 00 00 00       	mov    $0x1,%edi
    1191:	31 c0                	xor    %eax,%eax
    1193:	e8 f8 fe ff ff       	call   1090 <__printf_chk@plt>
    1198:	4c 89 fe             	mov    %r15,%rsi
    119b:	4c 89 e7             	mov    %r12,%rdi
    119e:	e8 6d 02 00 00       	call   1410 <vv_list_remove>
    11a3:	49 8b 1c 24          	mov    (%r12),%rbx
    11a7:	48 85 db             	test   %rbx,%rbx
    11aa:	74 15                	je     11c1 <main+0x121>
    11ac:	0f 1f 40 00          	nopl   0x0(%rax)
    11b0:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    11b4:	e8 b7 fe ff ff       	call   1070 <puts@plt>
    11b9:	48 8b 1b             	mov    (%rbx),%rbx
    11bc:	48 85 db             	test   %rbx,%rbx
    11bf:	75 ef                	jne    11b0 <main+0x110>
    11c1:	49 8b 56 10          	mov    0x10(%r14),%rdx
    11c5:	48 8d 35 55 0e 00 00 	lea    0xe55(%rip),%rsi        # 2021 <_IO_stdin_used+0x21>
    11cc:	bf 01 00 00 00       	mov    $0x1,%edi
    11d1:	31 c0                	xor    %eax,%eax
    11d3:	e8 b8 fe ff ff       	call   1090 <__printf_chk@plt>
    11d8:	4c 89 f6             	mov    %r14,%rsi
    11db:	4c 89 e7             	mov    %r12,%rdi
    11de:	e8 2d 02 00 00       	call   1410 <vv_list_remove>
    11e3:	49 8b 1c 24          	mov    (%r12),%rbx
    11e7:	48 85 db             	test   %rbx,%rbx
    11ea:	74 15                	je     1201 <main+0x161>
    11ec:	0f 1f 40 00          	nopl   0x0(%rax)
    11f0:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    11f4:	e8 77 fe ff ff       	call   1070 <puts@plt>
    11f9:	48 8b 1b             	mov    (%rbx),%rbx
    11fc:	48 85 db             	test   %rbx,%rbx
    11ff:	75 ef                	jne    11f0 <main+0x150>
    1201:	49 8b 55 10          	mov    0x10(%r13),%rdx
    1205:	48 8d 35 15 0e 00 00 	lea    0xe15(%rip),%rsi        # 2021 <_IO_stdin_used+0x21>
    120c:	bf 01 00 00 00       	mov    $0x1,%edi
    1211:	31 c0                	xor    %eax,%eax
    1213:	e8 78 fe ff ff       	call   1090 <__printf_chk@plt>
    1218:	4c 89 ee             	mov    %r13,%rsi
    121b:	4c 89 e7             	mov    %r12,%rdi
    121e:	e8 ed 01 00 00       	call   1410 <vv_list_remove>
    1223:	49 8b 1c 24          	mov    (%r12),%rbx
    1227:	48 85 db             	test   %rbx,%rbx
    122a:	74 15                	je     1241 <main+0x1a1>
    122c:	0f 1f 40 00          	nopl   0x0(%rax)
    1230:	48 8b 7b 10          	mov    0x10(%rbx),%rdi
    1234:	e8 37 fe ff ff       	call   1070 <puts@plt>
    1239:	48 8b 1b             	mov    (%rbx),%rbx
    123c:	48 85 db             	test   %rbx,%rbx
    123f:	75 ef                	jne    1230 <main+0x190>
    1241:	48 83 c4 08          	add    $0x8,%rsp
    1245:	31 c0                	xor    %eax,%eax
    1247:	5b                   	pop    %rbx
    1248:	41 5c                	pop    %r12
    124a:	41 5d                	pop    %r13
    124c:	41 5e                	pop    %r14
    124e:	41 5f                	pop    %r15
    1250:	5d                   	pop    %rbp
    1251:	c3                   	ret    
    1252:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    1259:	00 00 00 
    125c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001260 <_start>:
    1260:	f3 0f 1e fa          	endbr64 
    1264:	31 ed                	xor    %ebp,%ebp
    1266:	49 89 d1             	mov    %rdx,%r9
    1269:	5e                   	pop    %rsi
    126a:	48 89 e2             	mov    %rsp,%rdx
    126d:	48 83 e4 f0          	and    $0xfffffffffffffff0,%rsp
    1271:	50                   	push   %rax
    1272:	54                   	push   %rsp
    1273:	4c 8d 05 b6 02 00 00 	lea    0x2b6(%rip),%r8        # 1530 <__libc_csu_fini>
    127a:	48 8d 0d 3f 02 00 00 	lea    0x23f(%rip),%rcx        # 14c0 <__libc_csu_init>
    1281:	48 8d 3d 18 fe ff ff 	lea    -0x1e8(%rip),%rdi        # 10a0 <main>
    1288:	ff 15 52 2d 00 00    	call   *0x2d52(%rip)        # 3fe0 <__libc_start_main@GLIBC_2.2.5>
    128e:	f4                   	hlt    
    128f:	90                   	nop

0000000000001290 <deregister_tm_clones>:
    1290:	48 8d 3d 79 2d 00 00 	lea    0x2d79(%rip),%rdi        # 4010 <__TMC_END__>
    1297:	48 8d 05 72 2d 00 00 	lea    0x2d72(%rip),%rax        # 4010 <__TMC_END__>
    129e:	48 39 f8             	cmp    %rdi,%rax
    12a1:	74 15                	je     12b8 <deregister_tm_clones+0x28>
    12a3:	48 8b 05 2e 2d 00 00 	mov    0x2d2e(%rip),%rax        # 3fd8 <_ITM_deregisterTMCloneTable>
    12aa:	48 85 c0             	test   %rax,%rax
    12ad:	74 09                	je     12b8 <deregister_tm_clones+0x28>
    12af:	ff e0                	jmp    *%rax
    12b1:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    12b8:	c3                   	ret    
    12b9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

00000000000012c0 <register_tm_clones>:
    12c0:	48 8d 3d 49 2d 00 00 	lea    0x2d49(%rip),%rdi        # 4010 <__TMC_END__>
    12c7:	48 8d 35 42 2d 00 00 	lea    0x2d42(%rip),%rsi        # 4010 <__TMC_END__>
    12ce:	48 29 fe             	sub    %rdi,%rsi
    12d1:	48 89 f0             	mov    %rsi,%rax
    12d4:	48 c1 ee 3f          	shr    $0x3f,%rsi
    12d8:	48 c1 f8 03          	sar    $0x3,%rax
    12dc:	48 01 c6             	add    %rax,%rsi
    12df:	48 d1 fe             	sar    %rsi
    12e2:	74 14                	je     12f8 <register_tm_clones+0x38>
    12e4:	48 8b 05 05 2d 00 00 	mov    0x2d05(%rip),%rax        # 3ff0 <_ITM_registerTMCloneTable>
    12eb:	48 85 c0             	test   %rax,%rax
    12ee:	74 08                	je     12f8 <register_tm_clones+0x38>
    12f0:	ff e0                	jmp    *%rax
    12f2:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    12f8:	c3                   	ret    
    12f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001300 <__do_global_dtors_aux>:
    1300:	f3 0f 1e fa          	endbr64 
    1304:	80 3d 05 2d 00 00 00 	cmpb   $0x0,0x2d05(%rip)        # 4010 <__TMC_END__>
    130b:	75 2b                	jne    1338 <__do_global_dtors_aux+0x38>
    130d:	55                   	push   %rbp
    130e:	48 83 3d e2 2c 00 00 	cmpq   $0x0,0x2ce2(%rip)        # 3ff8 <__cxa_finalize@GLIBC_2.2.5>
    1315:	00 
    1316:	48 89 e5             	mov    %rsp,%rbp
    1319:	74 0c                	je     1327 <__do_global_dtors_aux+0x27>
    131b:	48 8b 3d e6 2c 00 00 	mov    0x2ce6(%rip),%rdi        # 4008 <__dso_handle>
    1322:	e8 39 fd ff ff       	call   1060 <__cxa_finalize@plt>
    1327:	e8 64 ff ff ff       	call   1290 <deregister_tm_clones>
    132c:	c6 05 dd 2c 00 00 01 	movb   $0x1,0x2cdd(%rip)        # 4010 <__TMC_END__>
    1333:	5d                   	pop    %rbp
    1334:	c3                   	ret    
    1335:	0f 1f 00             	nopl   (%rax)
    1338:	c3                   	ret    
    1339:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001340 <frame_dummy>:
    1340:	f3 0f 1e fa          	endbr64 
    1344:	e9 77 ff ff ff       	jmp    12c0 <register_tm_clones>
    1349:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)

0000000000001350 <my_list_iterator>:
    1350:	f3 0f 1e fa          	endbr64 
    1354:	48 8b 7f 10          	mov    0x10(%rdi),%rdi
    1358:	e9 13 fd ff ff       	jmp    1070 <puts@plt>
    135d:	0f 1f 00             	nopl   (%rax)

0000000000001360 <vv_list_initalize>:
    1360:	f3 0f 1e fa          	endbr64 
    1364:	55                   	push   %rbp
    1365:	bf 18 00 00 00       	mov    $0x18,%edi
    136a:	48 89 e5             	mov    %rsp,%rbp
    136d:	e8 0e fd ff ff       	call   1080 <malloc@plt>
    1372:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    1379:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    1380:	00 
    1381:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%rax)
    1388:	5d                   	pop    %rbp
    1389:	c3                   	ret    
    138a:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)

0000000000001390 <vv_list_append>:
    1390:	f3 0f 1e fa          	endbr64 
    1394:	55                   	push   %rbp
    1395:	48 89 e5             	mov    %rsp,%rbp
    1398:	41 54                	push   %r12
    139a:	49 89 f4             	mov    %rsi,%r12
    139d:	53                   	push   %rbx
    139e:	48 89 fb             	mov    %rdi,%rbx
    13a1:	bf 18 00 00 00       	mov    $0x18,%edi
    13a6:	e8 d5 fc ff ff       	call   1080 <malloc@plt>
    13ab:	48 85 db             	test   %rbx,%rbx
    13ae:	74 50                	je     1400 <vv_list_append+0x70>
    13b0:	48 85 c0             	test   %rax,%rax
    13b3:	74 4b                	je     1400 <vv_list_append+0x70>
    13b5:	48 83 3b 00          	cmpq   $0x0,(%rbx)
    13b9:	74 25                	je     13e0 <vv_list_append+0x50>
    13bb:	48 8b 53 08          	mov    0x8(%rbx),%rdx
    13bf:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    13c6:	48 89 50 08          	mov    %rdx,0x8(%rax)
    13ca:	48 89 02             	mov    %rax,(%rdx)
    13cd:	48 89 43 08          	mov    %rax,0x8(%rbx)
    13d1:	83 43 10 01          	addl   $0x1,0x10(%rbx)
    13d5:	4c 89 60 10          	mov    %r12,0x10(%rax)
    13d9:	5b                   	pop    %rbx
    13da:	41 5c                	pop    %r12
    13dc:	5d                   	pop    %rbp
    13dd:	c3                   	ret    
    13de:	66 90                	xchg   %ax,%ax
    13e0:	48 89 03             	mov    %rax,(%rbx)
    13e3:	48 89 43 08          	mov    %rax,0x8(%rbx)
    13e7:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    13ee:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    13f5:	00 
    13f6:	eb d9                	jmp    13d1 <vv_list_append+0x41>
    13f8:	0f 1f 84 00 00 00 00 	nopl   0x0(%rax,%rax,1)
    13ff:	00 
    1400:	31 c0                	xor    %eax,%eax
    1402:	eb d5                	jmp    13d9 <vv_list_append+0x49>
    1404:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    140b:	00 00 00 00 
    140f:	90                   	nop

0000000000001410 <vv_list_remove>:
    1410:	f3 0f 1e fa          	endbr64 
    1414:	48 8b 17             	mov    (%rdi),%rdx
    1417:	48 39 77 08          	cmp    %rsi,0x8(%rdi)
    141b:	74 2b                	je     1448 <vv_list_remove+0x38>
    141d:	48 8b 06             	mov    (%rsi),%rax
    1420:	48 39 d6             	cmp    %rdx,%rsi
    1423:	74 13                	je     1438 <vv_list_remove+0x28>
    1425:	48 8b 56 08          	mov    0x8(%rsi),%rdx
    1429:	48 89 02             	mov    %rax,(%rdx)
    142c:	48 89 50 08          	mov    %rdx,0x8(%rax)
    1430:	90                   	nop
    1431:	c3                   	ret    
    1432:	66 0f 1f 44 00 00    	nopw   0x0(%rax,%rax,1)
    1438:	48 89 07             	mov    %rax,(%rdi)
    143b:	48 c7 40 08 00 00 00 	movq   $0x0,0x8(%rax)
    1442:	00 
    1443:	eb eb                	jmp    1430 <vv_list_remove+0x20>
    1445:	0f 1f 00             	nopl   (%rax)
    1448:	48 39 d6             	cmp    %rdx,%rsi
    144b:	74 13                	je     1460 <vv_list_remove+0x50>
    144d:	48 8b 46 08          	mov    0x8(%rsi),%rax
    1451:	48 c7 00 00 00 00 00 	movq   $0x0,(%rax)
    1458:	48 89 47 08          	mov    %rax,0x8(%rdi)
    145c:	eb d2                	jmp    1430 <vv_list_remove+0x20>
    145e:	66 90                	xchg   %ax,%ax
    1460:	48 c7 47 08 00 00 00 	movq   $0x0,0x8(%rdi)
    1467:	00 
    1468:	48 c7 07 00 00 00 00 	movq   $0x0,(%rdi)
    146f:	eb bf                	jmp    1430 <vv_list_remove+0x20>
    1471:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    1478:	00 00 00 00 
    147c:	0f 1f 40 00          	nopl   0x0(%rax)

0000000000001480 <vv_list_iterate>:
    1480:	f3 0f 1e fa          	endbr64 
    1484:	55                   	push   %rbp
    1485:	48 89 e5             	mov    %rsp,%rbp
    1488:	41 54                	push   %r12
    148a:	53                   	push   %rbx
    148b:	48 8b 1f             	mov    (%rdi),%rbx
    148e:	48 85 db             	test   %rbx,%rbx
    1491:	74 1b                	je     14ae <vv_list_iterate+0x2e>
    1493:	49 89 f4             	mov    %rsi,%r12
    1496:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    149d:	00 00 00 
    14a0:	48 89 df             	mov    %rbx,%rdi
    14a3:	41 ff d4             	call   *%r12
    14a6:	48 8b 1b             	mov    (%rbx),%rbx
    14a9:	48 85 db             	test   %rbx,%rbx
    14ac:	75 f2                	jne    14a0 <vv_list_iterate+0x20>
    14ae:	5b                   	pop    %rbx
    14af:	41 5c                	pop    %r12
    14b1:	5d                   	pop    %rbp
    14b2:	c3                   	ret    
    14b3:	66 2e 0f 1f 84 00 00 	cs nopw 0x0(%rax,%rax,1)
    14ba:	00 00 00 
    14bd:	0f 1f 00             	nopl   (%rax)

00000000000014c0 <__libc_csu_init>:
    14c0:	f3 0f 1e fa          	endbr64 
    14c4:	41 57                	push   %r15
    14c6:	4c 8d 3d db 28 00 00 	lea    0x28db(%rip),%r15        # 3da8 <__frame_dummy_init_array_entry>
    14cd:	41 56                	push   %r14
    14cf:	49 89 d6             	mov    %rdx,%r14
    14d2:	41 55                	push   %r13
    14d4:	49 89 f5             	mov    %rsi,%r13
    14d7:	41 54                	push   %r12
    14d9:	41 89 fc             	mov    %edi,%r12d
    14dc:	55                   	push   %rbp
    14dd:	48 8d 2d cc 28 00 00 	lea    0x28cc(%rip),%rbp        # 3db0 <__do_global_dtors_aux_fini_array_entry>
    14e4:	53                   	push   %rbx
    14e5:	4c 29 fd             	sub    %r15,%rbp
    14e8:	48 83 ec 08          	sub    $0x8,%rsp
    14ec:	e8 0f fb ff ff       	call   1000 <_init>
    14f1:	48 c1 fd 03          	sar    $0x3,%rbp
    14f5:	74 1f                	je     1516 <__libc_csu_init+0x56>
    14f7:	31 db                	xor    %ebx,%ebx
    14f9:	0f 1f 80 00 00 00 00 	nopl   0x0(%rax)
    1500:	4c 89 f2             	mov    %r14,%rdx
    1503:	4c 89 ee             	mov    %r13,%rsi
    1506:	44 89 e7             	mov    %r12d,%edi
    1509:	41 ff 14 df          	call   *(%r15,%rbx,8)
    150d:	48 83 c3 01          	add    $0x1,%rbx
    1511:	48 39 dd             	cmp    %rbx,%rbp
    1514:	75 ea                	jne    1500 <__libc_csu_init+0x40>
    1516:	48 83 c4 08          	add    $0x8,%rsp
    151a:	5b                   	pop    %rbx
    151b:	5d                   	pop    %rbp
    151c:	41 5c                	pop    %r12
    151e:	41 5d                	pop    %r13
    1520:	41 5e                	pop    %r14
    1522:	41 5f                	pop    %r15
    1524:	c3                   	ret    
    1525:	66 66 2e 0f 1f 84 00 	data16 cs nopw 0x0(%rax,%rax,1)
    152c:	00 00 00 00 

0000000000001530 <__libc_csu_fini>:
    1530:	f3 0f 1e fa          	endbr64 
    1534:	c3                   	ret    

Disassembly of section .fini:

0000000000001538 <_fini>:
    1538:	f3 0f 1e fa          	endbr64 
    153c:	48 83 ec 08          	sub    $0x8,%rsp
    1540:	48 83 c4 08          	add    $0x8,%rsp
    1544:	c3                   	ret    
