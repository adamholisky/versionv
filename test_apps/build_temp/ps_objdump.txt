
build_objout/ps.vvs:     file format elf32-i386
build_objout/ps.vvs
architecture: i386, flags 0x00000150:
HAS_SYMS, DYNAMIC, D_PAGED
start address 0x00000390

Program Header:
    LOAD off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000414 memsz 0x00000414 flags r-x
    LOAD off    0x00000414 vaddr 0x00001414 paddr 0x00001414 align 2**12
         filesz 0x000000a8 memsz 0x000000a8 flags rw-
 DYNAMIC off    0x00000414 vaddr 0x00001414 paddr 0x00001414 align 2**2
         filesz 0x00000080 memsz 0x00000080 flags rw-

Dynamic Section:
  AUXILIARY            PIC
  HASH                 0x00000094
  STRTAB               0x0000015c
  SYMTAB               0x000000cc
  STRSZ                0x00000079
  SYMENT               0x00000010
  PLTGOT               0x00001494
  PLTRELSZ             0x00000038
  PLTREL               0x00000011
  JMPREL               0x000001d8

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .hash         00000038  00000094  00000094  00000094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynsym       00000090  000000cc  000000cc  000000cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .dynstr       00000079  0000015c  0000015c  0000015c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rel.plt      00000038  000001d8  000001d8  000001d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .plt          00000080  00000210  00000210  00000210  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .text         00000127  00000290  00000290  00000290  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  6 .rodata       0000005b  000003b8  000003b8  000003b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .eh_frame     00000000  00000414  00000414  00000414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .dynamic      00000080  00001414  00001414  00000414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .got.plt      00000028  00001494  00001494  00000494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .comment      00000012  00000000  00000000  000004bc  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000040  00000000  00000000  000004ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_info   000005b3  00000000  00000000  0000050e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000001c3  00000000  00000000  00000ac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000014f  00000000  00000000  00000c84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_frame  0000009c  00000000  00000000  00000dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00000310  00000000  00000000  00000e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line_str 000000ff  00000000  00000000  00001180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loclists 00000069  00000000  00000000  0000127f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_rnglists 00000020  00000000  00000000  000012e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 app.c
00000000 l    df *ABS*	00000000 ps.c
00000000 l    df *ABS*	00000000 
00001414 l     O .dynamic	00000000 _DYNAMIC
000003b3 l     F .text	00000000 __x86.get_pc_thunk.bx
00001494 l     O .got.plt	00000000 _GLOBAL_OFFSET_TABLE_
00000000         *UND*	00000000 syscall_exit_from_wrapper
00000000         *UND*	00000000 task_type_to_string
00000000         *UND*	00000000 set_debug_output
00000390 g     F .text	00000023 __start
00000290 g     F .text	000000fb main
00000000         *UND*	00000000 printf_
00000000         *UND*	00000000 task_status_to_string
00000000         *UND*	00000000 get_tasks



Disassembly of section .plt:

00000210 <syscall_exit_from_wrapper@plt-0x10>:
 210:	ff b3 04 00 00 00    	push   0x4(%ebx)
 216:	ff a3 08 00 00 00    	jmp    *0x8(%ebx)
 21c:	00 00                	add    %al,(%eax)
	...

00000220 <syscall_exit_from_wrapper@plt>:
 220:	ff a3 0c 00 00 00    	jmp    *0xc(%ebx)
 226:	68 00 00 00 00       	push   $0x0
 22b:	e9 e0 ff ff ff       	jmp    210 <syscall_exit_from_wrapper@plt-0x10>

00000230 <task_type_to_string@plt>:
 230:	ff a3 10 00 00 00    	jmp    *0x10(%ebx)
 236:	68 08 00 00 00       	push   $0x8
 23b:	e9 d0 ff ff ff       	jmp    210 <syscall_exit_from_wrapper@plt-0x10>

00000240 <set_debug_output@plt>:
 240:	ff a3 14 00 00 00    	jmp    *0x14(%ebx)
 246:	68 10 00 00 00       	push   $0x10
 24b:	e9 c0 ff ff ff       	jmp    210 <syscall_exit_from_wrapper@plt-0x10>

00000250 <main@plt>:
 250:	ff a3 18 00 00 00    	jmp    *0x18(%ebx)
 256:	68 18 00 00 00       	push   $0x18
 25b:	e9 b0 ff ff ff       	jmp    210 <syscall_exit_from_wrapper@plt-0x10>

00000260 <printf_@plt>:
 260:	ff a3 1c 00 00 00    	jmp    *0x1c(%ebx)
 266:	68 20 00 00 00       	push   $0x20
 26b:	e9 a0 ff ff ff       	jmp    210 <syscall_exit_from_wrapper@plt-0x10>

00000270 <task_status_to_string@plt>:
 270:	ff a3 20 00 00 00    	jmp    *0x20(%ebx)
 276:	68 28 00 00 00       	push   $0x28
 27b:	e9 90 ff ff ff       	jmp    210 <syscall_exit_from_wrapper@plt-0x10>

00000280 <get_tasks@plt>:
 280:	ff a3 24 00 00 00    	jmp    *0x24(%ebx)
 286:	68 30 00 00 00       	push   $0x30
 28b:	e9 80 ff ff ff       	jmp    210 <syscall_exit_from_wrapper@plt-0x10>

Disassembly of section .text:

00000290 <main>:
 290:	8d 4c 24 04          	lea    0x4(%esp),%ecx
 294:	83 e4 f0             	and    $0xfffffff0,%esp
 297:	ff 71 fc             	push   -0x4(%ecx)
 29a:	55                   	push   %ebp
 29b:	89 e5                	mov    %esp,%ebp
 29d:	57                   	push   %edi
 29e:	56                   	push   %esi
 29f:	53                   	push   %ebx
 2a0:	e8 0e 01 00 00       	call   3b3 <__x86.get_pc_thunk.bx>
 2a5:	81 c3 ef 11 00 00    	add    $0x11ef,%ebx
 2ab:	51                   	push   %ecx
 2ac:	83 ec 28             	sub    $0x28,%esp
 2af:	8d 83 24 ef ff ff    	lea    -0x10dc(%ebx),%eax
 2b5:	89 45 d8             	mov    %eax,-0x28(%ebp)
 2b8:	8d 83 50 ef ff ff    	lea    -0x10b0(%ebx),%eax
 2be:	89 45 d4             	mov    %eax,-0x2c(%ebp)
 2c1:	8d 83 32 ef ff ff    	lea    -0x10ce(%ebx),%eax
 2c7:	89 45 dc             	mov    %eax,-0x24(%ebp)
 2ca:	8d b6 00 00 00 00    	lea    0x0(%esi),%esi
 2d0:	83 ec 0c             	sub    $0xc,%esp
 2d3:	6a 01                	push   $0x1
 2d5:	e8 66 ff ff ff       	call   240 <set_debug_output@plt>
 2da:	59                   	pop    %ecx
 2db:	ff 75 d8             	push   -0x28(%ebp)
 2de:	e8 7d ff ff ff       	call   260 <printf_@plt>
 2e3:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 2ea:	e8 51 ff ff ff       	call   240 <set_debug_output@plt>
 2ef:	e8 8c ff ff ff       	call   280 <get_tasks@plt>
 2f4:	c7 04 24 01 00 00 00 	movl   $0x1,(%esp)
 2fb:	89 c6                	mov    %eax,%esi
 2fd:	e8 3e ff ff ff       	call   240 <set_debug_output@plt>
 302:	5f                   	pop    %edi
 303:	ff 75 d4             	push   -0x2c(%ebp)
 306:	83 c6 08             	add    $0x8,%esi
 309:	31 ff                	xor    %edi,%edi
 30b:	e8 50 ff ff ff       	call   260 <printf_@plt>
 310:	c7 04 24 00 00 00 00 	movl   $0x0,(%esp)
 317:	e8 24 ff ff ff       	call   240 <set_debug_output@plt>
 31c:	83 c4 10             	add    $0x10,%esp
 31f:	90                   	nop
 320:	83 7e f8 ff          	cmpl   $0xffffffff,-0x8(%esi)
 324:	74 4a                	je     370 <main+0xe0>
 326:	8b 46 6c             	mov    0x6c(%esi),%eax
 329:	83 ec 0c             	sub    $0xc,%esp
 32c:	8b 48 38             	mov    0x38(%eax),%ecx
 32f:	6a 01                	push   $0x1
 331:	89 4d e0             	mov    %ecx,-0x20(%ebp)
 334:	e8 07 ff ff ff       	call   240 <set_debug_output@plt>
 339:	58                   	pop    %eax
 33a:	ff 76 fc             	push   -0x4(%esi)
 33d:	e8 ee fe ff ff       	call   230 <task_type_to_string@plt>
 342:	5a                   	pop    %edx
 343:	ff 76 1c             	push   0x1c(%esi)
 346:	89 45 e4             	mov    %eax,-0x1c(%ebp)
 349:	e8 22 ff ff ff       	call   270 <task_status_to_string@plt>
 34e:	59                   	pop    %ecx
 34f:	8b 4d e0             	mov    -0x20(%ebp),%ecx
 352:	5a                   	pop    %edx
 353:	8b 55 e4             	mov    -0x1c(%ebp),%edx
 356:	56                   	push   %esi
 357:	51                   	push   %ecx
 358:	52                   	push   %edx
 359:	50                   	push   %eax
 35a:	57                   	push   %edi
 35b:	ff 75 dc             	push   -0x24(%ebp)
 35e:	e8 fd fe ff ff       	call   260 <printf_@plt>
 363:	83 c4 14             	add    $0x14,%esp
 366:	6a 00                	push   $0x0
 368:	e8 d3 fe ff ff       	call   240 <set_debug_output@plt>
 36d:	83 c4 10             	add    $0x10,%esp
 370:	83 c7 01             	add    $0x1,%edi
 373:	81 c6 b0 00 00 00    	add    $0xb0,%esi
 379:	81 ff ff 00 00 00    	cmp    $0xff,%edi
 37f:	75 9f                	jne    320 <main+0x90>
 381:	e8 9a fe ff ff       	call   220 <syscall_exit_from_wrapper@plt>
 386:	e9 45 ff ff ff       	jmp    2d0 <main+0x40>
 38b:	66 90                	xchg   %ax,%ax
 38d:	66 90                	xchg   %ax,%ax
 38f:	90                   	nop

00000390 <__start>:
 390:	55                   	push   %ebp
 391:	89 e5                	mov    %esp,%ebp
 393:	53                   	push   %ebx
 394:	e8 1a 00 00 00       	call   3b3 <__x86.get_pc_thunk.bx>
 399:	81 c3 fb 10 00 00    	add    $0x10fb,%ebx
 39f:	83 ec 04             	sub    $0x4,%esp
 3a2:	e8 a9 fe ff ff       	call   250 <main@plt>
 3a7:	b8 06 00 00 00       	mov    $0x6,%eax
 3ac:	cd 99                	int    $0x99
 3ae:	8b 5d fc             	mov    -0x4(%ebp),%ebx
 3b1:	c9                   	leave  
 3b2:	c3                   	ret    

000003b3 <__x86.get_pc_thunk.bx>:
 3b3:	8b 1c 24             	mov    (%esp),%ebx
 3b6:	c3                   	ret    
